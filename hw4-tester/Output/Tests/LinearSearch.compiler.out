
const vmt_LS
  :LS.Start
  :LS.Print
  :LS.Search
  :LS.Init


func Main [in 0 , out 2 , local 3]



  $t3 = HeapAllocZ( 12)

  $v1 = $t3
  [$v1+0] = :vmt_LS
  $v0 = $t3
  if $v0 goto :null1

  Error( "null pointer")
null1:

  $v0 = $t3
  $v0 = [$v0+0]
  $t2 = $v0

  $v0 = $t2
  $v0 = [$v0+0]
  $t2 = $v0

  local[0] = $t1
  local[1] = $t3
  local[2] = $t2

  $v0 = $t3
  $a0 = $v0
  $a1 = 10

  $v0 = $t2
  call $v0

  $t1 = local[0]
  $t3 = local[1]
  $t2 = local[2]

  $t1 = $v0

  $v0 = $t1
  PrintIntS( $v0)


  ret
func LS.Start [in 2 , out 2 , local 12]

  local[0] = $s3
  local[1] = $s2
  local[2] = $s1
  local[3] = $s0

  $s2 = $a0
  $s1 = $a1

  $v0 = $s2
  $v0 = [$v0+0]
  $s3 = $v0

  $v0 = $s3
  $v0 = [$v0+12]
  $s3 = $v0

  local[4] = $t5
  local[5] = $t4
  local[6] = $t7
  local[7] = $t6
  local[8] = $t1
  local[9] = $t3
  local[10] = $t2
  local[11] = $t8

  $v0 = $s2
  $a0 = $v0
  $v0 = $s1
  $a1 = $v0

  $v0 = $s3
  call $v0

  $t5 = local[4]
  $t4 = local[5]
  $t7 = local[6]
  $t6 = local[7]
  $t1 = local[8]
  $t3 = local[9]
  $t2 = local[10]
  $t8 = local[11]

  $t0 = $v0

  $v0 = $s2
  $v0 = [$v0+0]
  $s0 = $v0

  $v0 = $s0
  $v0 = [$v0+4]
  $s0 = $v0

  local[4] = $t5
  local[5] = $t4
  local[6] = $t7
  local[7] = $t6
  local[8] = $t1
  local[9] = $t3
  local[10] = $t2
  local[11] = $t8

  $v0 = $s2
  $a0 = $v0

  $v0 = $s0
  call $v0

  $t5 = local[4]
  $t4 = local[5]
  $t7 = local[6]
  $t6 = local[7]
  $t1 = local[8]
  $t3 = local[9]
  $t2 = local[10]
  $t8 = local[11]

  $t0 = $v0

  PrintIntS( 9999)

  $v0 = $s2
  $v0 = [$v0+0]
  $t4 = $v0

  $v0 = $t4
  $v0 = [$v0+8]
  $t4 = $v0

  local[4] = $t5
  local[5] = $t4
  local[6] = $t7
  local[7] = $t6
  local[8] = $t1
  local[9] = $t3
  local[10] = $t2
  local[11] = $t8

  $v0 = $s2
  $a0 = $v0
  $a1 = 8

  $v0 = $t4
  call $v0

  $t5 = local[4]
  $t4 = local[5]
  $t7 = local[6]
  $t6 = local[7]
  $t1 = local[8]
  $t3 = local[9]
  $t2 = local[10]
  $t8 = local[11]

  $t3 = $v0

  $v0 = $t3
  PrintIntS( $v0)

  $v0 = $s2
  $v0 = [$v0+0]
  $t2 = $v0

  $v0 = $t2
  $v0 = [$v0+8]
  $t2 = $v0

  local[4] = $t5
  local[5] = $t4
  local[6] = $t7
  local[7] = $t6
  local[8] = $t1
  local[9] = $t3
  local[10] = $t2
  local[11] = $t8

  $v0 = $s2
  $a0 = $v0
  $a1 = 12

  $v0 = $t2
  call $v0

  $t5 = local[4]
  $t4 = local[5]
  $t7 = local[6]
  $t6 = local[7]
  $t1 = local[8]
  $t3 = local[9]
  $t2 = local[10]
  $t8 = local[11]

  $t1 = $v0

  $v0 = $t1
  PrintIntS( $v0)

  $v0 = $s2
  $v0 = [$v0+0]
  $t8 = $v0

  $v0 = $t8
  $v0 = [$v0+8]
  $t8 = $v0

  local[4] = $t5
  local[5] = $t4
  local[6] = $t7
  local[7] = $t6
  local[8] = $t1
  local[9] = $t3
  local[10] = $t2
  local[11] = $t8

  $v0 = $s2
  $a0 = $v0
  $a1 = 17

  $v0 = $t8
  call $v0

  $t5 = local[4]
  $t4 = local[5]
  $t7 = local[6]
  $t6 = local[7]
  $t1 = local[8]
  $t3 = local[9]
  $t2 = local[10]
  $t8 = local[11]

  $t7 = $v0

  $v0 = $t7
  PrintIntS( $v0)

  $v0 = $s2
  $v0 = [$v0+0]
  $t6 = $v0

  $v0 = $t6
  $v0 = [$v0+8]
  $t6 = $v0

  local[4] = $t5
  local[5] = $t4
  local[6] = $t7
  local[7] = $t6
  local[8] = $t1
  local[9] = $t3
  local[10] = $t2
  local[11] = $t8

  $v0 = $s2
  $a0 = $v0
  $a1 = 50

  $v0 = $t6
  call $v0

  $t5 = local[4]
  $t4 = local[5]
  $t7 = local[6]
  $t6 = local[7]
  $t1 = local[8]
  $t3 = local[9]
  $t2 = local[10]
  $t8 = local[11]

  $t5 = $v0

  $v0 = $t5
  PrintIntS( $v0)
  $v0 = 55

  $s3 = local[0]
  $s2 = local[1]
  $s1 = local[2]
  $s0 = local[3]
  ret
func LS.Print [in 2 , out 2 , local 7]


  $t7 = $a0

  $t5 = 1
while1_top:

  $v0 = $t7
  $v0 = [$v0+8]
  $t6 = $v0

  $v0 = $t5
  $v1 = $t6
  $t4 = LtS( $v0 $v1)
  $v0 = $t4
  if0 $v0 goto :while1_end

  $v0 = $t7
  $v0 = [$v0+4]
  $t3 = $v0
  $v0 = $t3
  if $v0 goto :null2

  Error( "null pointer")
null2:

  $v0 = $t3
  $v0 = [$v0+0]
  $t2 = $v0

  $v0 = $t5
  $v1 = $t2
  $t2 = Lt( $v0 $v1)
  $v0 = $t2
  if $v0 goto :bounds1

  Error( "array index out of bounds")
bounds1:

  $v0 = $t5
  $t2 = MulS( $v0 4)

  $v0 = $t2
  $v1 = $t3
  $t2 = Add( $v0 $v1)

  $v0 = $t2
  $v0 = [$v0+4]
  $t1 = $v0

  $v0 = $t1
  PrintIntS( $v0)

  $v0 = $t5
  $t5 = Add( $v0 1)
goto :while1_top
while1_end:
  $v0 = 0

  ret
func LS.Search [in 2 , out 2 , local 13]

  local[0] = $s4
  local[1] = $s3
  local[2] = $s2
  local[3] = $s1
  local[4] = $s0

  $s4 = $a0
  $t4 = $a1

  $s2 = 1

  $t0 = 0

  $t6 = 0
while2_top:

  $v0 = $s4
  $v0 = [$v0+8]
  $s3 = $v0

  $v0 = $s2
  $v1 = $s3
  $s1 = LtS( $v0 $v1)
  $v0 = $s1
  if0 $v0 goto :while2_end

  $v0 = $s4
  $v0 = [$v0+4]
  $t5 = $v0
  $v0 = $t5
  if $v0 goto :null3

  Error( "null pointer")
null3:

  $v0 = $t5
  $v0 = [$v0+0]
  $t3 = $v0

  $v0 = $s2
  $v1 = $t3
  $t3 = Lt( $v0 $v1)
  $v0 = $t3
  if $v0 goto :bounds2

  Error( "array index out of bounds")
bounds2:

  $v0 = $s2
  $t3 = MulS( $v0 4)

  $v0 = $t3
  $v1 = $t5
  $t3 = Add( $v0 $v1)

  $v0 = $t3
  $v0 = [$v0+4]
  $s0 = $v0

  $v0 = $t4
  $t8 = Add( $v0 1)

  $v0 = $s0
  $v1 = $t4
  $t2 = LtS( $v0 $v1)
  $v0 = $t2
  if0 $v0 goto :if1_else

  $t0 = 0
goto :if1_end
if1_else:

  $v0 = $s0
  $v1 = $t8
  $t1 = LtS( $v0 $v1)

  $v1 = $t1
  $t7 = Sub( 1 $v1)
  $v0 = $t7
  if0 $v0 goto :if2_else

  $t0 = 0
goto :if2_end
if2_else:

  $t0 = 1

  $t6 = 1

  $v0 = $s4
  $v0 = [$v0+8]
  $s2 = $v0
if2_end:
if1_end:

  $v0 = $s2
  $s2 = Add( $v0 1)
goto :while2_top
while2_end:
  $v0 = $t6

  $s4 = local[0]
  $s3 = local[1]
  $s2 = local[2]
  $s1 = local[3]
  $s0 = local[4]
  ret
func LS.Init [in 2 , out 2 , local 13]

  local[0] = $s4
  local[1] = $s3
  local[2] = $s2
  local[3] = $s1
  local[4] = $s0

  $s3 = $a0
  $s4 = $a1
  $v0 = $s4
  $v1 = $s3
  [$v1+8] = $v0

  local[5] = $t5
  local[6] = $t4
  local[7] = $t7
  local[8] = $t6
  local[9] = $t1
  local[10] = $t3
  local[11] = $t2
  local[12] = $t8

  $v0 = $s4
  $a0 = $v0

  call :AllocArray

  $t5 = local[5]
  $t4 = local[6]
  $t7 = local[7]
  $t6 = local[8]
  $t1 = local[9]
  $t3 = local[10]
  $t2 = local[11]
  $t8 = local[12]

  $s2 = $v0
  $v0 = $s2
  $v1 = $s3
  [$v1+4] = $v0

  $s0 = 1

  $v0 = $s3
  $v0 = [$v0+8]
  $t8 = $v0

  $v0 = $t8
  $s1 = Add( $v0 1)
while3_top:

  $v0 = $s3
  $v0 = [$v0+8]
  $t4 = $v0

  $v0 = $s0
  $v1 = $t4
  $t3 = LtS( $v0 $v1)
  $v0 = $t3
  if0 $v0 goto :while3_end

  $v1 = $s0
  $t7 = MulS( 2 $v1)

  $v0 = $s1
  $t6 = Sub( $v0 3)

  $v0 = $s3
  $v0 = [$v0+4]
  $t2 = $v0
  $v0 = $t2
  if $v0 goto :null4

  Error( "null pointer")
null4:

  $v0 = $t2
  $v0 = [$v0+0]
  $t1 = $v0

  $v0 = $s0
  $v1 = $t1
  $t1 = Lt( $v0 $v1)
  $v0 = $t1
  if $v0 goto :bounds3

  Error( "array index out of bounds")
bounds3:

  $v0 = $s0
  $t1 = MulS( $v0 4)

  $v0 = $t1
  $v1 = $t2
  $t1 = Add( $v0 $v1)

  $v0 = $t7
  $v1 = $t6
  $t5 = Add( $v0 $v1)
  $v0 = $t5
  $v1 = $t1
  [$v1+4] = $v0

  $v0 = $s0
  $s0 = Add( $v0 1)

  $v0 = $s1
  $s1 = Sub( $v0 1)
goto :while3_top
while3_end:
  $v0 = 0

  $s4 = local[0]
  $s3 = local[1]
  $s2 = local[2]
  $s1 = local[3]
  $s0 = local[4]
  ret
func AllocArray [in 2 , out 2 , local 3]


  $t3 = $a0

  $v0 = $t3
  $t2 = MulS( $v0 4)

  $v0 = $t2
  $t2 = Add( $v0 4)

  $v0 = $t2
  $t1 = HeapAllocZ( $v0)
  $v0 = $t3
  $v1 = $t1
  [$v1+0] = $v0
  $v0 = $t1

  ret
